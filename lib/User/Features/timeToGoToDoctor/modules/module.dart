import 'dart:convert';

Autogenerated welcomeFromJson(String str) =>
    Autogenerated.fromJson(json.decode(str));
String welcomeToJson(Autogenerated data) => json.encode(data.toJson());

class Autogenerated {
  Null actionButtons;
  Content? content;
  Schedule? schedule;

  Autogenerated({this.actionButtons, this.content, this.schedule});

  Autogenerated.fromJson(Map<String, dynamic> json) {
    actionButtons = json['actionButtons'];
    content =
        json['content'] != null ? Content.fromJson(json['content']) : null;
    schedule =
        json['schedule'] != null ? Schedule.fromJson(json['schedule']) : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['actionButtons'] = actionButtons;
    if (content != null) {
      data['content'] = content?.toJson();
    }
    if (schedule != null) {
      data['schedule'] = schedule?.toJson();
    }
    return data;
  }
}

class Content {
  int? id;
  String? channelKey;
  Null? groupKey;
  String? title;
  String? body;
  Null? summary;
  bool? showWhen;
  Null? icon;
  Null? payload;
  Null? largeIcon;
  Null? bigPicture;
  Null? customSound;
  bool? autoDismissible;
  String? privacy;
  String? category;
  String? actionType;
  int? color;
  Null? backgroundColor;
  bool? wakeUpScreen;
  bool? fullScreenIntent;
  bool? criticalAlert;
  bool? roundedLargeIcon;
  bool? roundedBigPicture;
  Null? createdSource;
  Null? createdLifeCycle;
  Null? displayedLifeCycle;
  Null? createdDate;
  Null? displayedDate;
  bool? hideLargeIconOnExpand;
  Null? progress;
  Null? badge;
  String? ticker;
  bool? locked;
  String? notificationLayout;
  bool? displayOnForeground;
  bool? displayOnBackground;

  Content(
      {this.id,
      this.channelKey,
      this.groupKey,
      this.title,
      this.body,
      this.summary,
      this.showWhen,
      this.icon,
      this.payload,
      this.largeIcon,
      this.bigPicture,
      this.customSound,
      this.autoDismissible,
      this.privacy,
      this.category,
      this.actionType,
      this.color,
      this.backgroundColor,
      this.wakeUpScreen,
      this.fullScreenIntent,
      this.criticalAlert,
      this.roundedLargeIcon,
      this.roundedBigPicture,
      this.createdSource,
      this.createdLifeCycle,
      this.displayedLifeCycle,
      this.createdDate,
      this.displayedDate,
      this.hideLargeIconOnExpand,
      this.progress,
      this.badge,
      this.ticker,
      this.locked,
      this.notificationLayout,
      this.displayOnForeground,
      this.displayOnBackground});

  Content.fromJson(Map<String, dynamic> json) {
    id = json['id'];
    channelKey = json['channelKey'];
    groupKey = json['groupKey'];
    title = json['title'];
    body = json['body'];
    summary = json['summary'];
    showWhen = json['showWhen'];
    icon = json['icon'];
    payload = json['payload'];
    largeIcon = json['largeIcon'];
    bigPicture = json['bigPicture'];
    customSound = json['customSound'];
    autoDismissible = json['autoDismissible'];
    privacy = json['privacy'];
    category = json['category'];
    actionType = json['actionType'];
    color = json['color'];
    backgroundColor = json['backgroundColor'];
    wakeUpScreen = json['wakeUpScreen'];
    fullScreenIntent = json['fullScreenIntent'];
    criticalAlert = json['criticalAlert'];
    roundedLargeIcon = json['roundedLargeIcon'];
    roundedBigPicture = json['roundedBigPicture'];
    createdSource = json['createdSource'];
    createdLifeCycle = json['createdLifeCycle'];
    displayedLifeCycle = json['displayedLifeCycle'];
    createdDate = json['createdDate'];
    displayedDate = json['displayedDate'];
    hideLargeIconOnExpand = json['hideLargeIconOnExpand'];
    progress = json['progress'];
    badge = json['badge'];
    ticker = json['ticker'];
    locked = json['locked'];
    notificationLayout = json['notificationLayout'];
    displayOnForeground = json['displayOnForeground'];
    displayOnBackground = json['displayOnBackground'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['id'] = id;
    data['channelKey'] = channelKey;
    data['groupKey'] = groupKey;
    data['title'] = title;
    data['body'] = body;
    data['summary'] = summary;
    data['showWhen'] = showWhen;
    data['icon'] = icon;
    data['payload'] = payload;
    data['largeIcon'] = largeIcon;
    data['bigPicture'] = bigPicture;
    data['customSound'] = customSound;
    data['autoDismissible'] = autoDismissible;
    data['privacy'] = privacy;
    data['category'] = category;
    data['actionType'] = actionType;
    data['color'] = color;
    data['backgroundColor'] = backgroundColor;
    data['wakeUpScreen'] = wakeUpScreen;
    data['fullScreenIntent'] = fullScreenIntent;
    data['criticalAlert'] = criticalAlert;
    data['roundedLargeIcon'] = roundedLargeIcon;
    data['roundedBigPicture'] = roundedBigPicture;
    data['createdSource'] = createdSource;
    data['createdLifeCycle'] = createdLifeCycle;
    data['displayedLifeCycle'] = displayedLifeCycle;
    data['createdDate'] = createdDate;
    data['displayedDate'] = displayedDate;
    data['hideLargeIconOnExpand'] = hideLargeIconOnExpand;
    data['progress'] = progress;
    data['badge'] = badge;
    data['ticker'] = ticker;
    data['locked'] = locked;
    data['notificationLayout'] = notificationLayout;
    data['displayOnForeground'] = displayOnForeground;
    data['displayOnBackground'] = displayOnBackground;
    return data;
  }
}

class Schedule {
  String? timeZone;
  bool? allowWhileIdle;
  bool? repeats;
  bool? preciseAlarm;
  Null? era;
  int? year;
  int? month;
  Null? day;
  int? hour;
  int? minute;
  Null? second;
  Null? weekday;
  Null? weekOfMonth;
  Null? weekOfYear;

  Schedule(
      {this.timeZone,
      this.allowWhileIdle,
      this.repeats,
      this.preciseAlarm,
      this.era,
      this.year,
      this.month,
      this.day,
      this.hour,
      this.minute,
      this.second,
      this.weekday,
      this.weekOfMonth,
      this.weekOfYear});

  Schedule.fromJson(Map<String, dynamic> json) {
    timeZone = json['timeZone'];
    allowWhileIdle = json['allowWhileIdle'];
    repeats = json['repeats'];
    preciseAlarm = json['preciseAlarm'];
    era = json['era'];
    year = json['year'];
    month = json['month'];
    day = json['day'];
    hour = json['hour'];
    minute = json['minute'];
    second = json['second'];
    weekday = json['weekday'];
    weekOfMonth = json['weekOfMonth'];
    weekOfYear = json['weekOfYear'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['timeZone'] = timeZone;
    data['allowWhileIdle'] = allowWhileIdle;
    data['repeats'] = repeats;
    data['preciseAlarm'] = preciseAlarm;
    data['era'] = era;
    data['year'] = year;
    data['month'] = month;
    data['day'] = day;
    data['hour'] = hour;
    data['minute'] = minute;
    data['second'] = second;
    data['weekday'] = weekday;
    data['weekOfMonth'] = weekOfMonth;
    data['weekOfYear'] = weekOfYear;
    return data;
  }
}
